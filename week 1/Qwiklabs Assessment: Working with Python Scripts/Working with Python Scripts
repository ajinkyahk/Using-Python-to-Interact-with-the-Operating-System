Fix file permissions

We have a python script ready for you. From your home directory (~), use the following command to navigate to the scripts directory:
cd scripts

List the files to find the script using the following command:
ls

To view the contents of this file, enter the following command:
cat health_checks.py
    
 
Now that you understand what the script does, and the functions within it, let's run the Python file using the following command:
./health_checks.py


To run this file, we need it to have execute permission (x). 
Let's update the file permissions and then try running the file. Use the following command to add execute permission to the file:
sudo chmod +x health_checks.py


Now try running the file again by using the following command:
./health_checks.py



Debug the issue

Use a nano editor to open the file health_checks.py.
nano health_checks.py



Make the necessary changes now. And once the changes are done, save the file by clicking Ctrl-o, enter key and Ctrl-x.
Once you have debugged the issue, try running the file again by using the command:
./health_checks.py



To use the requests module, you first need to install it. Use the following command to install the request module. 
If you receive any prompts, continue by clicking Y.
sudo apt install python3-requests

Create a file named network.py. The file should be created in the same directory as health_checks.py, i.e., scripts. 
If you are not present in the scripts directory, navigate to the scripts directory first and then create the file.
cd ~/scripts

Use nano editor to create a new file network.py:
nano network.py

Add a shebang line to define where the interpreter is located. In this case, the shebang line would be /usr/bin/env python3.
#!/usr/bin/env python3

Import the request module into the file using the import statements.
import requests


To check whether the local host is correctly configured, we use the socket module.
Now, import the socket module.
import socket


Next, write a function check_localhost, which checks whether the local host is correctly configured. We do this by calling the gethostbyname within the function.
localhost = socket.gethostbyname('localhost')


The above function translates a host name to IPv4 address format. Pass the parameter localhost to the function gethostbyname. 
The result for this function should be 127.0.0.1.
Edit the function check_localhost so that it returns true if the function returns 127.0.0.1.
Now, we will write another function called check_connectivity. This checks whether the computer can make successful calls to the internet.
A request is when you ping a website for information. 
The Requests library is designed for this task. You will use the request module for this, 
and call the GET method by passing http://www.google.com as the parameter.

request = requests.get("http://www.google.com")

his returns the website's status code. This status code is an integer value. 
Now, assign the result to a response variable and check the status_code attribute of that variable. 
It should return 200.
Edit the function check_connectivity so that it returns true if the function returns 200 status_code.




Use the Python module

Now, youâ€™re going to re-edit the file health_checks.py to make it call the checks in the network module. 
For this, you will need to import the module into health_checks.py script.
To do this, open the script health_checks.py
nano health_checks.py

Now import network module at the beginning of the file.
from network import *

Call the checks to the network module by adding an elif clause after the if clause in the script health_checks.py.
Replace the else part with an elif clause.
elif check_localhost() and check_connectivity():
    print("Everything ok")
    

Add an else part at the end of the file.
else:
    print("Network checks failed")
    
    
Once you have completed editing the file, press Ctrl-o, Enter, and Ctrl-x to exit.

Now, run the file.
./health_checks.py

It should return "Everything ok".






### health_checks.py ###

#!/usr/bin/env python3
import shutil
import psutil
from network import *

def check_disk_usage(disk):
    """Verifies that there's enough free space on disk"""
    du = shutil.disk_usage(disk)
    free = du.free / du.total * 100
    return free > 20

def check_cpu_usage():
    """Verifies that there's enough unused CPU"""
    usage = psutil.cpu_percent(1)
    return usage < 75

# If there's not enough disk, or not enough CPU, print an error
if not check_disk_usage('/') or not check_cpu_usage():
    print("ERROR!")
elif check_localhost() and check_connectivity():
    print("Everything ok")
else:
    print("Network checks failed")
    





### network.py ###

#!/usr/bin/env python3

import requests
import socket

def check_localhost():
    localhost = socket.gethostbyname('localhost')
    return localhost == '127.0.0.1'

def check_connectivity():
    request = requests.get("http://www.google.com")
    return 200

